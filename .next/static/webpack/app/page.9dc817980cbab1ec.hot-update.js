"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/supabase-user-service.ts":
/*!**************************************!*\
  !*** ./lib/supabase-user-service.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseUserService: () => (/* binding */ SupabaseUserService)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(app-pages-browser)/./lib/supabase.ts\");\n\nclass SupabaseUserService {\n    static isSupabaseConfigured() {\n        return _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase !== null;\n    }\n    static async getCurrentUser() {\n        if (!this.isSupabaseConfigured()) {\n            return null;\n        }\n        try {\n            const { data: { user }, error: authError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n            /**\n       * Supabase returns an `Auth session missing!` error\n       * when the user is not signed-in. This isn’t a real\n       * failure — it simply means there’s no active session.\n       */ if (authError && authError.message !== \"Auth session missing!\") {\n                console.error(\"Auth error:\", authError);\n            }\n            if (!user) return null;\n            if (!this.currentUser || this.currentUser.id !== user.id) {\n                const { data: userData, error: dbError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").select(\"*\").eq(\"id\", user.id).single();\n                if (dbError) {\n                    console.error(\"Database error:\", dbError);\n                    return null;\n                }\n                if (userData) {\n                    this.currentUser = {\n                        id: userData.id,\n                        name: userData.name,\n                        email: userData.email,\n                        createdAt: new Date(userData.created_at),\n                        preferences: userData.preferences || {\n                            darkMode: true,\n                            ttsEnabled: true,\n                            notifications: true\n                        }\n                    };\n                }\n            }\n            return this.currentUser;\n        } catch (error) {\n            console.error(\"Error getting current user:\", error);\n            return null;\n        }\n    }\n    static async signUp(name, email, password) {\n        if (!this.isSupabaseConfigured()) {\n            return {\n                success: false,\n                error: \"Database not configured. Please set up Supabase credentials.\"\n            };\n        }\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signUp({\n                email,\n                password\n            });\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            if (data.user) {\n                // Create user profile\n                const { error: profileError } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").insert({\n                    id: data.user.id,\n                    email,\n                    name,\n                    preferences: {\n                        darkMode: true,\n                        ttsEnabled: true,\n                        notifications: true\n                    }\n                });\n                if (profileError) {\n                    console.error(\"Error creating user profile:\", profileError);\n                    return {\n                        success: false,\n                        error: \"Failed to create user profile\"\n                    };\n                }\n                this.dispatchUserChange();\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false,\n                error: \"Failed to create user\"\n            };\n        } catch (error) {\n            console.error(\"Sign up error:\", error);\n            return {\n                success: false,\n                error: (error === null || error === void 0 ? void 0 : error.message) || \"An unexpected error occurred\"\n            };\n        }\n    }\n    static async signIn(email, password) {\n        if (!this.isSupabaseConfigured()) {\n            return {\n                success: false,\n                error: \"Database not configured. Please set up Supabase credentials.\"\n            };\n        }\n        try {\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signInWithPassword({\n                email,\n                password\n            });\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            if (data.user) {\n                await this.getCurrentUser() // Load user data\n                ;\n                this.dispatchUserChange();\n                return {\n                    success: true\n                };\n            }\n            return {\n                success: false,\n                error: \"Failed to sign in\"\n            };\n        } catch (error) {\n            console.error(\"Sign in error:\", error);\n            return {\n                success: false,\n                error: (error === null || error === void 0 ? void 0 : error.message) || \"An unexpected error occurred\"\n            };\n        }\n    }\n    static async signOut() {\n        if (!this.isSupabaseConfigured()) {\n            return;\n        }\n        try {\n            await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.signOut();\n            this.currentUser = null;\n            this.dispatchUserChange();\n        } catch (error) {\n            console.error(\"Sign out error:\", error);\n        }\n    }\n    static async updateUser(updates) {\n        if (!this.isSupabaseConfigured()) {\n            return false;\n        }\n        try {\n            const user = await this.getCurrentUser();\n            if (!user) return false;\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"users\").update({\n                name: updates.name,\n                preferences: updates.preferences\n            }).eq(\"id\", user.id);\n            if (error) {\n                console.error(\"Error updating user:\", error);\n                return false;\n            }\n            // Update local cache\n            if (this.currentUser) {\n                this.currentUser = {\n                    ...this.currentUser,\n                    ...updates\n                };\n            }\n            this.dispatchUserChange();\n            return true;\n        } catch (error) {\n            console.error(\"Update user error:\", error);\n            return false;\n        }\n    }\n    // Chat conversation methods\n    static async saveConversation(messages, title) {\n        if (!this.isSupabaseConfigured()) {\n            return null;\n        }\n        try {\n            const user = await this.getCurrentUser();\n            if (!user) return null;\n            const conversationTitle = title || this.generateConversationTitle(messages);\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"conversations\").insert({\n                user_id: user.id,\n                title: conversationTitle,\n                messages\n            }).select().single();\n            if (error) {\n                console.error(\"Error saving conversation:\", error);\n                return null;\n            }\n            return (data === null || data === void 0 ? void 0 : data.id) || null;\n        } catch (error) {\n            console.error(\"Save conversation error:\", error);\n            return null;\n        }\n    }\n    static async updateConversation(conversationId, messages) {\n        if (!this.isSupabaseConfigured()) {\n            return false;\n        }\n        try {\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"conversations\").update({\n                messages,\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", conversationId);\n            if (error) {\n                console.error(\"Error updating conversation:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Update conversation error:\", error);\n            return false;\n        }\n    }\n    static async getConversations() {\n        if (!this.isSupabaseConfigured()) {\n            return [];\n        }\n        try {\n            const user = await this.getCurrentUser();\n            if (!user) return [];\n            const { data, error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"conversations\").select(\"*\").eq(\"user_id\", user.id).order(\"updated_at\", {\n                ascending: false\n            });\n            if (error) {\n                console.error(\"Error getting conversations:\", error);\n                return [];\n            }\n            return (data || []).map((conv)=>({\n                    id: conv.id,\n                    userId: conv.user_id,\n                    title: conv.title,\n                    messages: Array.isArray(conv.messages) ? conv.messages : [],\n                    createdAt: conv.created_at,\n                    updatedAt: conv.updated_at\n                }));\n        } catch (error) {\n            console.error(\"Get conversations error:\", error);\n            return [];\n        }\n    }\n    static async deleteConversation(conversationId) {\n        if (!this.isSupabaseConfigured()) {\n            return false;\n        }\n        try {\n            const { error } = await _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"conversations\").delete().eq(\"id\", conversationId);\n            if (error) {\n                console.error(\"Error deleting conversation:\", error);\n                return false;\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Delete conversation error:\", error);\n            return false;\n        }\n    }\n    static generateConversationTitle(messages) {\n        const firstUserMessage = messages.find((m)=>m.role === \"user\");\n        if (firstUserMessage && firstUserMessage.content) {\n            const title = firstUserMessage.content.slice(0, 50);\n            return title.length < firstUserMessage.content.length ? \"\".concat(title, \"...\") : title;\n        }\n        return \"Conversation \".concat(new Date().toLocaleDateString());\n    }\n    static dispatchUserChange() {\n        if (true) {\n            window.dispatchEvent(new Event(\"userChanged\"));\n        }\n    }\n    // Initialize auth state listener\n    static initializeAuthListener() {\n        if (!this.isSupabaseConfigured()) {\n            return;\n        }\n        _supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.onAuthStateChange(async (event, session)=>{\n            if (event === \"SIGNED_IN\" && (session === null || session === void 0 ? void 0 : session.user)) {\n                await this.getCurrentUser();\n            } else if (event === \"SIGNED_OUT\") {\n                this.currentUser = null;\n            }\n            this.dispatchUserChange();\n        });\n    }\n}\nSupabaseUserService.currentUser = null;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabase-user-service.ts\n"));

/***/ })

});